[gd_scene load_steps=6 format=2]

[ext_resource path="res://assets/2k_venus_surface3.jpg" type="Texture" id=1]

[sub_resource type="Shader" id=3]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.stable's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	VERTEX.y += sin(TIME * 0.5 + (VERTEX.x + VERTEX.z) * 0.5) * 10.0;
	VERTEX.x += sin(TIME * 0.5 + (VERTEX.y + VERTEX.z) * 0.5) * 10.0;
	VERTEX.z += sin(TIME * 0.5 + (VERTEX.x + VERTEX.y) * 0.5) * 10.0;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/emission = Color( 0, 0, 0, 1 )
shader_param/emission_energy = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_emission = ExtResource( 1 )

[sub_resource type="SphereMesh" id=2]
material = SubResource( 4 )
radius = 500.0
height = 1000.0

[sub_resource type="Animation" id=5]
resource_name = "rotate"
length = 0.001
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray(  ),
"transitions": PoolRealArray(  ),
"update": 0,
"values": [  ]
}

[node name="Start2" type="MeshInstance"]
transform = Transform( 0.383646, 0, 0.92348, 0, 1, 0, -0.92348, 0, 0.383646, 0, 0, 0 )
mesh = SubResource( 2 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/rotate = SubResource( 5 )
